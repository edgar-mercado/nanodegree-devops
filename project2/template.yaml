Parameters:
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
  ImageId:
    Description: Ubuntu 18 ImageId
    Type: String
  Region:
    Type: String
    Default: us-west-2
    AllowedValues:
      - us-west-2
      - us-west-1
    Description: Enter the AWS region to deploy stack. Default is us-west-2
  VPCCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.0.0/16
    Description: Enter the CIDR for your VPC
  PublicSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.1.0/24
    Description: Enter the CIDR for your Public Subnet 1
  PublicSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.2.0/24
    Description: Enter the CIDR for your Public Subnet 2
  PrivateSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.3.0/24
    Description: Enter the CIDR for your Private Subnet 1
  PrivateSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.4.0/24
    Description: Enter the CIDR for your Private Subnet 2
  KeyName:
    Type: String
    Default: admin-bastion
    Description: Enter name of pre-generated KeyPair
  WebServerCapacity:
    Default: '4'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '4'
    MaxValue: '4'
    ConstraintDescription: must be between 1 and 1 EC2 instances.

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-06d51e91cea0dac8d

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: VPC-1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnet-2

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -  Key: Name
           Value: IGW

  AttachIGtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-RT

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-RT

  AssociatePublicSubnet1ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  AssociatePublicSubnet2ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  AssociatePrivateSubnet1ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet1

  AssociatePrivateSubnet2ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet2

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRT

  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW
      RouteTableId: !Ref PrivateRT

  # Create EIP which will be used by the NAT Gateway
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC

  NATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NAT-GW

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bastion-SG
      VpcId: !Ref VPC

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application Load Balancer to expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG
      VpcId: !Ref VPC

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 to allow SSH from Bastion and expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: EC2-SG
      VpcId: !Ref VPC

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub ${Region}a
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref BastionSG
      Tags:
        - Key: Name
          Value: Bastion Host

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachIGtoVPC
    Properties:
      Name: ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ALB
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: AppTargets
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ALB-TG

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2

  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Metadata:
        AWS::CloudFormation::Init:
          configSets:
            full_install: [install_cfn]
          install_cfn:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                mode: '000400'
                owner: root
                group: root
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebAppLaunchConfig --configsets full_install --region ${AWS::Region}
                  runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

      Properties:
        ImageId: !Ref ImageId
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        SecurityGroups:
        - !Ref EC2SG
        InstanceType: t3.small
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        UserData:
          Fn::Base64:
            !Sub |
                #!/bin/bash -xe
                apt-get update -y
                apt-get install apache2 -y
                apt-get install unzip awscli -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://udacity-demo-1/udacity.zip .
                unzip -o udacity.zip
                apt-get install -y python-setuptools
                mkdir -p /opt/aws/bin
                wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WebAppLaunchConfig --configsets full_install --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: WebAppLaunchConfig
    Properties:
      VPCZoneIdentifier:  [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTG
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '4'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '4'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

Outputs:

  VPC:
      Description: A reference to the created VPC
      Value: !Ref VPC
      Export:
        Name: !Sub ${EnvironmentName}-VPCID

  VPCPublicRouteTable:
      Description: Public Routing
      Value: !Ref PublicRT
      Export:
        Name: !Sub ${EnvironmentName}-PUB-RT


  VPCPrivateRouteTable:
      Description: Private Routing AZ1
      Value: !Ref PrivateRT
      Export:
        Name: !Sub ${EnvironmentName}-PRI-RT

  PublicSubnets:
      Description: A list of the public subnets
      Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
      Export:
        Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
      Export:
        Name: !Sub ${EnvironmentName}-PRIV-NETS

  PublicSubnet1:
      Description: A reference to the public subnet in the 1st Availability Zone
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-PUB1-SN

  PublicSubnet2:
      Description: A reference to the public subnet in the 2nd Availability Zone
      Value: !Ref PublicSubnet2
      Export:
        Name: !Sub ${EnvironmentName}-PUB2-SN

  PrivateSubnet1:
      Description: A reference to the private subnet in the 1st Availability Zone
      Value: !Ref PrivateSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-PRI1-SN

  PrivateSubnet2:
      Description: A reference to the private subnet in the 2nd Availability Zone
      Value: !Ref PrivateSubnet2
      Export:
        Name: !Sub ${EnvironmentName}-PRI2-SN

  ALBDNSName:
      Description: LoadBalancer URL
      Value: !Join [ "", ["http://",!GetAtt ALB.DNSName] ]
      Export:
        Name: !Sub ${EnvironmentName}-ALB
